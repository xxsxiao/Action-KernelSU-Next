name: New KernelSU Next SUSFS 12R(Ace3) with LXC/Docker
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8550'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_12r_v'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'kalama'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android13'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '5.15'
      BUILD_METHOD:
        description: "编译方式"
        required: true
        default: 'gki'
      KSUNEXT_ENABLED:
        description: "添加 KSU Next"
        required: true
        type: boolean
        default: true
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      SUSFS_CI:
        description: "SUSFS调用CI"
        required: true
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "build"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install jq -y
          sudo apt install -y python3 git curl patch bc bison flex libssl-dev

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: Set up KernelSU Next
        if: github.event.inputs.KSUNEXT_ENABLED == 'true'
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up susfs
        if: github.event.inputs.SUSFS_ENABLED == 'true'
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./KernelSU-Next/
          cp ../kernel_patches/next/syscall_hooks.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          cd ./KernelSU-Next
          patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true

          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < syscall_hooks.patch

      - name: Add LXC/Docker Support
        run: |
          cd kernel_workspace/kernel_platform
          
          # 应用容器补丁
          # curl -sL https://github.com/Linux-on-droid/vendor_lindroid/raw/main/patches/lxc.patch | patch -p1
          # curl -sL https://gist.githubusercontent.com/android-container-dev/8c5d6f3a9e12d7c5b4e1d/raw/gki-container-v3.patch | patch -p1
          
          # 修改系统配置
          sed -i 's/CONFIG_ANDROID_PARANOID_NETWORK=y/# CONFIG_ANDROID_PARANOID_NETWORK is not set/' ./common/arch/arm64/configs/gki_defconfig
          
          # 添加容器配置
          echo "CONFIG_NAMESPACES=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_USER_NS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_NS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUPS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_DEVICE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_VETH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_MACVLAN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_BRIDGE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_OVERLAY_FS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT_IPV4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_POSIX_MQUEUE=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECCOMP=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECCOMP_FILTER=y" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/CONFIG_CGROUP_SCHED=y/CONFIG_CGROUP_SCHED=y\nCONFIG_CGROUP_HUGETLB=y/' ./common/arch/arm64/configs/gki_defconfig
          
          # 添加KernelSU配置
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Build kernel
        run: |
          cd kernel_workspace
          export LTO=thin
          ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/Image ./AnyKernel3/
          
          # 添加测试脚本
          cat > ./AnyKernel3/test_container.sh << 'EOF'
          #!/bin/bash
          echo "=== LXC/Docker 支持验证 ==="
          echo "[1/4] 内核配置检查:"
          zgrep -E 'CONFIG_NAMESPACES=|CONFIG_USER_NS=|CONFIG_CGROUPS=' /proc/config.gz 2>&1 | sed 's/^/    /'
          
          echo "[2/4] LXC功能验证:"
          lxc-checkconfig 2>&1 | grep -E 'namespaces|cgroup' | sed 's/^/    /'
          
          echo "[3/4] Docker容器测试:"
          docker run --rm -it alpine:latest echo "    Docker功能正常" 2>&1 | sed 's/^/    /'
          
          echo "[4/4] 网络命名空间测试:"
          ip netns add testns && ip netns delete testns && echo "    网络命名空间操作成功" 2>&1 | sed 's/^/    /'
          EOF
          
          chmod +x ./AnyKernel3/test_container.sh

      - name: Download SUSFS Module
        if: ${{ github.event.inputs.SUSFS_CI == 'true' }}
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs" | jq -r '.workflow_runs[0].id')

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')

          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          cp ksu_module_susfs.zip ./AnyKernel3/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_Image_${ { github.run_id } }
          path: |
            ./AnyKernel3/Image
            ./AnyKernel3/test_container.sh
            ./AnyKernel3/ksu_module_susfs.zip
